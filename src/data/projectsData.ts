export interface Project {
  id: string;
  title: string;
  description: string;
  thumbUrl: string;
  imageUrls: string[];
  pdfUrl?: string; // when present, this project is a PDF flipbook
}

export const projects: Project[] = [];

// --- PDF projects autogenerated from files in public/PDF ---
// The client name is the text before the first underscore of the filename.
// Thumbnails use a generic placeholder image from the existing library.

const pdfFilenames = [
  "AM_20_2025.pdf",                    // 1. AM
  "Bimarket 2025_13.pdf",              // 2. Bimarket 2025
  "BITAR_COMPLETO.pdf",                // 3. BITAR
  "DELIZIE_CANVASS_10_2025-compresso.pdf", // 4. DELIZIE
  "DELIZIE_NO FOOD_10_2025.pdf",       // 5. DELIZIE
  "DELIZIE_PET FOOD_10_2025.pdf",      // 6. DELIZIE
  "DELIZIEMARKET_VOL_N20.pdf",         // 7. DELIZIEMARKET
  "DI BLASIO_CANVASS_2025_10.pdf",     // 8. DI BLASIO
  "DROWSSAP_Brochure60x20_REV03_bozza.pdf", // 9. DROWSSAP
  "FRESCOHOUSE_IPERFRESCO_2025_20.pdf", // 10. FRESCOHOUSE
  "LITIBERI_6x3 litiberi.pdf",         // 11. LITIBERI
  "LITIBERI_Manifesto 70x100.pdf",     // 12. LITIBERI
  "PAC_CASH_2025_13.pdf",              // 13. PAC
  "ResourceConsulting_Catalogo.pdf"     // 14. ResourceConsulting
];

const pdfProjects: Project[] = pdfFilenames.map((file, index) => {
  const baseName = file.replace(/\.pdf$/i, "");
  const clientName = baseName.split("_")[0];
  // Ensure unique and stable id per file (use full base name, not only client)
  const id = `pdf-${baseName.toLowerCase().replace(/\s+/g, "-").replace(/[^a-z0-9-]/g, "")}`;

  // Use sequential numbering starting from 1
  const logoNumber = index + 1;
  const logoUrl = `/images/${logoNumber}.png`;

  return {
    id,
    title: clientName,
    description: `Documento PDF del cliente ${clientName}.`,
    thumbUrl: logoUrl,
    imageUrls: [],
    pdfUrl: `/PDF/${file}`
  } as Project;
});

export const allProjects: Project[] = [...projects, ...pdfProjects];